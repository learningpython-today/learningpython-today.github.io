..  Copyright (C)  Paul Resnick.  Permission is granted to copy, distribute
    and/or modify this document under the terms of the GNU Free Documentation
    License, Version 1.3 or any later version published by the Free Software
    Foundation; with Invariant Sections being Forward, Prefaces, and
    Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
    the license is included in the section entitled "GNU Free Documentation
    License".

.. _rest_apis_chap:

Using REST APIs
===============

REST stands for REpresentational State Transfer. It originally had a more abstract meaning, but has come to be a shorthand name for web sites that, rather than being for people to click on and read and interact with, are for *programs* -- give a ``REST API`` website the right input, and it will direct you to a page on the internet that has the data you are looking for.

API stands for *Application Programming Interface*. An API specifies how an external program (an application program) can request that a program perform certain computations.

Putting the two together, a REST API specifies how external programs can make HTTP requests to a web site in order to request that some computation be carried out and data returned as output. When a website is designed to accept requests generated by other computer programs, and produce outputs to be consumed by other programs, it is sometimes called a *web service*, as opposed to a *web site* which produces output meant for humans to use. You can think of REST APIs for the moment as specifics about how to use websites that are made for programs, for programs to interact with and deal with, instead of websites like ``http://www.google.com``, which is for *people*.

Of course, a web browser is just a computer program, too, so all requests to web sites come from other computer programs. But usually a browser requests data from a web site in order to display it directly to a human user of the browser, and not to hand it over to a program that will be good at processing it.

We will examine a common pattern used in REST APIs, where there is a base URL that defines an "endpoint" (a place where a bunch of data lives), and then additional information is appended to the URL that defines the request (information to specify what specific data we want to get for our program), and the response comes back not as HTML, which is the format of data most web pages are in, but as a format called ``JSON`` (see the Nested Data chapter). Along the way, we will see some functions in python modules that are helpful for constructing the URLS and for processing the specially JSON-formatted response.

We will also take a detour to understand a little about Unicode, the system for representing non-English characters on the Internet.
